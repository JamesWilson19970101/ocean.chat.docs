"use strict";(self.webpackChunkoceanchat_devdocs=self.webpackChunkoceanchat_devdocs||[]).push([[9165],{7558:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>c,default:()=>u,frontMatter:()=>r,metadata:()=>o,toc:()=>l});const o=JSON.parse('{"id":"devdocs/file structure","title":"file structure","description":"Next.js IM Application Directory Structure","source":"@site/docs/devdocs/file structure.md","sourceDirName":"devdocs","slug":"/devdocs/file structure","permalink":"/ocean.chat.docs/docs/devdocs/file structure","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"concurrency considerations","permalink":"/ocean.chat.docs/docs/devdocs/concurrency considerations"},"next":{"title":"graphql vs http in oceanchat","permalink":"/ocean.chat.docs/docs/devdocs/graphql vs http in oceanchat"}}');var s=n(4848),i=n(8453);const r={},c=void 0,a={},l=[{value:"Next.js IM Application Directory Structure",id:"nextjs-im-application-directory-structure",level:2}];function d(e){const t={code:"code",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h2,{id:"nextjs-im-application-directory-structure",children:"Next.js IM Application Directory Structure"}),"\n",(0,s.jsx)(t.p,{children:"Here's a suggested directory structure for your Next.js IM application using the App Router:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"/oceanchat\n\u251c\u2500\u2500 /app # Next.js App Router directory\n\u2502 \u251c\u2500\u2500 /api # API routes (server-side logic)\n\u2502 \u2502 \u2514\u2500\u2500 /auth # Authentication related API endpoints\n\u2502 \u2502 \u251c\u2500\u2500 /register # Registration logic\n\u2502 \u2502 \u2502 \u2514\u2500\u2500 route.ts # Handles POST requests for user registration\n\u2502 \u2502 \u2514\u2500\u2500 /login # Login logic (you'll add this later)\n\u2502 \u2502 \u2514\u2500\u2500 route.ts # Handles POST requests for user login\n\u2502 \u251c\u2500\u2500 /(auth) # Route group for authentication pages (no impact on URL path)\n\u2502 \u2502 \u251c\u2500\u2500 /login # Login page route\n\u2502 \u2502 \u2502 \u2514\u2500\u2500 page.tsx # Login page component\n\u2502 \u2502 \u2514\u2500\u2500 /register # Register page route\n\u2502 \u2502 \u2514\u2500\u2500 page.tsx # --- Register page component (We will create this) ---\n\u2502 \u251c\u2500\u2500 /(main) # Route group for the main application interface (e.g., protected routes)\n\u2502 \u2502 \u251c\u2500\u2500 /chat # Main chat interface route\n\u2502 \u2502 \u2502 \u2514\u2500\u2500 [roomId] # room page route\n        \u2514\u2500\u2500 page.tsx # room page component\n\u2502 \u2502 \u2502 \u2514\u2500\u2500 page.tsx # Chat page component\n\u2502 \u2502 \u2514\u2500\u2500 layout.tsx # Layout specific to the chat app section (e.g., sidebar, header)\n\u2502 \u251c\u2500\u2500 layout.tsx # Root layout (applies to all routes)\n\u2502 \u2514\u2500\u2500 page.tsx # Optional: Your application's landing/home page (if needed)\n\u2502 \u2514\u2500\u2500 globals.css # Global styles (imported in root layout)\n\u251c\u2500\u2500 /components # Reusable UI components (non-shadcn)\n\u2502 \u251c\u2500\u2500 /auth # Components specific to authentication flows\n\u2502 \u2514\u2500\u2500 /ui # shadcn/ui components (automatically managed)\n\u251c\u2500\u2500 /hooks # Custom React hooks\n\u251c\u2500\u2500 /lib # Utility functions, helpers, constants, types\n\u2502 \u251c\u2500\u2500 validators.ts # Zod validation schemas\n\u2502 \u2514\u2500\u2500 utils.ts # shadcn/ui utility functions (auto-generated)\n\u251c\u2500\u2500 /public # Static assets (images, fonts, etc.)\n\u2502 \u2514\u2500\u2500 ocean-bg.jpg # Place your background image here\n\u251c\u2500\u2500 /store # State management (e.g., Zustand, Redux Toolkit)\n\u251c\u2500\u2500 next.config.mjs # Next.js configuration file\n\u251c\u2500\u2500 tsconfig.json # TypeScript configuration\n\u251c\u2500\u2500 postcss.config.js # PostCSS configuration (for Tailwind CSS)\n\u251c\u2500\u2500 tailwind.config.ts # Tailwind CSS configuration\n\u2514\u2500\u2500 package.json # Project dependencies and scripts\n"})}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.strong,{children:"Explanation:"})}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:(0,s.jsx)(t.code,{children:"/app"})}),": Core of the Next.js App Router."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:(0,s.jsx)(t.code,{children:"/app/api"})}),": Server-side API endpoints. The ",(0,s.jsx)(t.code,{children:"/auth/register/route.ts"})," will handle the actual user creation logic (e.g., saving to a database)."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsxs)(t.strong,{children:[(0,s.jsx)(t.code,{children:"/(auth)"})," and ",(0,s.jsx)(t.code,{children:"/(main)"})]}),": These are Route Groups. They organize your routes without affecting the URL structure. ",(0,s.jsx)(t.code,{children:"(auth)"})," groups pages like login/register, while ",(0,s.jsx)(t.code,{children:"(main)"})," could group the core authenticated parts of your app."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:(0,s.jsx)(t.code,{children:"/components"})}),": Your custom React components. shadcn/ui components live in ",(0,s.jsx)(t.code,{children:"/components/ui"}),"."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:(0,s.jsx)(t.code,{children:"/lib"})}),": Shared functions, type definitions, validation schemas (",(0,s.jsx)(t.code,{children:"zod"}),"), etc."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:(0,s.jsx)(t.code,{children:"/public"})}),": Static files accessible directly via URL (like your background image)."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:(0,s.jsx)(t.code,{children:"/store"})}),": If you use a global state management library."]}),"\n"]})]})}function u(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>c});var o=n(6540);const s={},i=o.createContext(s);function r(e){const t=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),o.createElement(i.Provider,{value:t},e.children)}}}]);